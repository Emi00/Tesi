b * bubbleSort(int*, int) 
r
ni
ni
ni
ni
c
b * bubbleSort(int*, int) 
r
ni
ipy
b * bubbleSort(int*, int) 
er
r
ni
x/10x 0x7fffffffd8e0
info  registers xmm
info  registers xmm1
ni
info  registers xmm1
ni
info  registers xmm1
info  registers xmm0
x/10x $rdi
ni
c
b * insertionSort(int*, int) 
r
c
b * insertionSort(int*, int) 
r
ni
ni
b * insertionSort(int*, int) 
r
ni
c
c
r
ni
b * countingSort(int*, int) 
r
ni
n
n
disassemble countingSort(int*, int) 
disassemble countingSort(int*, int) 
b * countingSort(int*, int) 
r
b * bubbleSort(int*, int) 
r
b * bubbleSort(int*, int) 
r
disassemble main
b * main + 125
r
si
x/10x $rdi
x/15x $rdi
ni
x/15x $rax
n
n
disassemble bubbleSort(int*, int) 
b * main + 125
r
ni
si
disassemble bubbleSort(int*, int) 
disassemble bubbleSort(int*, int) 
b * main + 125
r
b * bubbleSort(int*, int) 
c
n
x/12x $rdi
n
ni
x/x $xmm0
x $xmm0
x/1x $xmm0
$xmm0
xmm0
info register xmm0

info register xmm0 xmm1
display /x xmm0
display /x xmm0.v4_int32
display /x $xmm0.v4_int32
display /x $xmm0.v4_int32 $xmm1.v4_int32
display .x $xmm0.v4_int32 /x $xmm1.v4_int32
display -x $xmm0.v4_int32; display /x $xmm1.v4_int32
display .x $xmm0.v4_int32; display /x $xmm1.v4_int32
display .x $xmm0.v4_int32; display /x $xmm1.v4_int32
display .x $xmm0.v4_int32 $xmm1.v4_int32
display /x $xmm0.v4_int32
display /x $xmm0.v4_int32 $xmm1.v4_int32
display -x $xmm0.v4_int32 /x $xmm1.v4_int32
display .x $xmm0.v4_int32
display /x $xmm0.v4_int32
display /x $xmm1.v4_int32
ni
display /x $xmm0.v4_int32
display /x $xmm1.v4_int32
ni
ni
ni
n
c
b * selectionSort
r
ni
x $xmm0
x/x $xmm0
info register $xmm0
display /x $xmm1.v2_double
display /x $xmm0.v2_double
display /x $xmm1.v2_double
display /x $xmm2.v2_double
ni
c
r
c
b * selectionSortAVX512(double*, int)
r
ni
b * selectionSortAVX512(double*, int)
r
ni
b * selectionSortAVX512(double*, int)
r
ni
si
ni
b * selectionSort
r
disassemble selectionSort
disassemble main
b * main
r
ni
ni
c
b * main
r
disassemble main
b * main + 57
c
disassemble main
b * main + 89
c
b * main + 57
r
ni
ni
b * selectionSortAVX512_v2(double*, int) 
r
b * selectionSortAVX512_v2(double*, int) 
r 5000 2
disassemble selectionSortAVX512_v2(double*, int) 
ni
x/x $rip + 0x130e
x/10x $rip + 0x130e
x/100x $rip + 0x130e
ni
ni
disassemble selectionSortAVX512_v2(double*, int) 
ni
ni
nini
ni
ni
c
r 10 1
b * selectionSortAVX512_v1
r 10 1
ni
disassemble add_vectors(std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> >&) 
b * add_vectors(std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> >&) 
disassemble add_vectors(std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> >&) 
disassemble selectionSort(double*, int) 
disassemble selectionSort(double*, int) 
disassemble selectionSort(double*, int) 
